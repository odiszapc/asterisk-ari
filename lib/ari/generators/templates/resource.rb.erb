#------------------------------------------------------------------------------
#
#  WARNING !
#
#  This is a generated file. DO NOT EDIT THIS FILE! Your changes will
#  be lost the next time this file is regenerated.
#
#  This file was generated using asterisk-ari-client ruby gem.
#
#------------------------------------------------------------------------------

module Ari
  class <%= klass_name %> < <%= inherits_from %>

    <%- if resource_attributes.present? -%>
    attr_reader <%= resource_attributes.map { |a| ":#{a.name}" }.join(', ') %>

    <%- end -%>
    <%- resource_attributes.each do |attribute| -%>
    <%- unless %{ string int long boolean }.include?(attribute.type) -%>
    <%- attribute_value = begin
      if attribute.type == 'Date'
        'Time.parse(val)'
      else
        if attribute.is_a_list?
          "val.map { |v| #{attribute.type}.new(v) }"
        else
          attribute.type + '.new(val)'
        end
      end
    end -%>
    def <%= attribute.name %>=(val)
      @<%= attribute.name %> ||= <%= attribute_value %>
    end

    <%- end -%>
    <%- end -%>

    <%- apis.each do |api| -%>
    <%- api.operations.each do |operation| -%>
    # <%= operation.http_method %> <%= api.path %>
    #
    # <%= api.description %>
    #<% operation.description.scan(/.{80}/).each do |comment_line| %>
    # <%= comment_line -%>
    <%- end if operation.description %>
    #
    <%- if operation.parameters.present? -%>
    # Parameters:
    #
    <%- operation.parameters.each do |parameter| -%>
    # <%= parameter.name %> <%= '(required)' if parameter.required? %> - <%= parameter.description %>
    <%- end -%>
    #
    <%- end -%>
    def self.<%= operation.method_name %>(options = {})
      <%- operation.parameters.each do |parameter| -%>
      <%- next unless parameter.required? -%>
      raise ArgumentError.new("Parameter <%= parameter.name %> must be passed in options hash.") unless options[:<%= parameter.name %>]
      <%- end -%>
      <%- if operation.parameters.any? { |p| p.location == 'path' } -%>
      path = '<%= api.path %>' % options
      <%- else -%>
      path = '<%= api.path %>'
      <%- end -%>
      response = client(options).<%= operation.http_method.downcase %>(path, options)
      <%- if operation.returns_array? -%>
      <%- if operation.return_klass -%>
      response.map { |hash| <%= operation.return_klass %>.new(hash.merge(client: options[:client])) }
      <%- else -%>
      response.map { |hash| <%= operation.return_klass %>.new(hash) }
      <%- end -%>
      <%- elsif operation.return_klass -%>
      <%= operation.return_klass %>.new(response.merge(client: options[:client]))
      <%- else -%>
      return response
      <%- end -%>
    <%- if operation.http_method == 'DELETE' -%>
    rescue Ari::RequestError => e
      raise unless e.code == '404'
    <%- end -%>
    end
    <%- unless operation.method_name == operation.original_method_name -%>
    class << self; alias_method :<%= operation.original_method_name %>, :<%= operation.method_name %>; end
    <%- end -%>
    <%- if operation.parameters.any? { |p| p.location == 'path' } -%>

    def <%= operation.method_name %>(options = {})
      self.class.<%= operation.method_name %>(options.merge(<%= id_attribute_name %>: self.id, client: @client))
    end
    <%- end -%>

    <%- end -%>
    <%- end unless generate_only_models? -%>

  end
end

<%- unless generate_only_models? -%>
Ari::Client.send :define_method, '<%= resource_plural_name %>' do
  Ari::ListResource.new(self, Ari::<%= klass_name %>)
end
<%- end -%>
