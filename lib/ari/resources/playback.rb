#------------------------------------------------------------------------------
#
#  WARNING !
#
#  This is a generated file. DO NOT EDIT THIS FILE! Your changes will
#  be lost the next time this file is regenerated.
#
#  This file was generated using asterisk-ari-client ruby gem.
#
#------------------------------------------------------------------------------

module Ari
  class Playback < Resource

    attr_reader :id, :media_uri, :next_media_uri, :target_uri, :language, :state


    # GET /playbacks/%{playbackId}
    #
    # Control object for a playback operation.
    #
    #
    # Parameters:
    #
    # playbackId (required) - Playback's id
    #
    def self.get(options = {})
      raise ArgumentError.new("Parameter playbackId must be passed in options hash.") unless options[:playbackId]
      path = '/playbacks/%{playbackId}' % options
      response = client(options).get(path, options)
      Playback.new(response.merge(client: options[:client]))
    end

    def get(options = {})
      self.class.get(options.merge(playbackId: self.id, client: @client))
    end

    # DELETE /playbacks/%{playbackId}
    #
    # Control object for a playback operation.
    #
    #
    # Parameters:
    #
    # playbackId (required) - Playback's id
    #
    def self.stop(options = {})
      raise ArgumentError.new("Parameter playbackId must be passed in options hash.") unless options[:playbackId]
      path = '/playbacks/%{playbackId}' % options
      response = client(options).delete(path, options)
      return response
    rescue Ari::RequestError => e
      raise unless e.code == '404'
    end

    def stop(options = {})
      self.class.stop(options.merge(playbackId: self.id, client: @client))
    end

    # POST /playbacks/%{playbackId}/control
    #
    # Control object for a playback operation.
    #
    #
    # Parameters:
    #
    # playbackId (required) - Playback's id
    # operation (required) - Operation to perform on the playback.
    #
    def self.control(options = {})
      raise ArgumentError.new("Parameter playbackId must be passed in options hash.") unless options[:playbackId]
      raise ArgumentError.new("Parameter operation must be passed in options hash.") unless options[:operation]
      path = '/playbacks/%{playbackId}/control' % options
      response = client(options).post(path, options)
      return response
    end

    def control(options = {})
      self.class.control(options.merge(playbackId: self.id, client: @client))
    end


  end
end

Ari::Client.send :define_method, 'playbacks' do
  Ari::ListResource.new(self, Ari::Playback)
end
